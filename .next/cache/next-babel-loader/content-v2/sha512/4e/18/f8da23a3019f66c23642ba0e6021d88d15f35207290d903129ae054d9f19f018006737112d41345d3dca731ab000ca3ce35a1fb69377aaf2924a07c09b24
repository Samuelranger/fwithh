{"ast":null,"code":"import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport connectDb from \"../../utils/connectDb\";\nimport User from \"../../models/User\";\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    const user = await User.findOne({\n      email\n    }).select(\"+password\");\n\n    if (!user) {\n      return res.status(404).send(\"User does not exists\");\n    }\n\n    const passwordsMatch = await bcrypt.compare(password, user.password);\n\n    if (passwordsMatch) {\n      const token = jwt.sign({\n        userId: user._id\n      }, process.env.JWT_SECRET, {\n        expiresIn: \"7d\"\n      });\n      res.status(200).json(token);\n    } else {\n      res.status(401).send(\"Password not match\");\n    }\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error logging in user\");\n  }\n});","map":{"version":3,"sources":["D:/fiverr/fiverr/brought/shoponix/dashboard-source-code/pages/api/login.js"],"names":["bcrypt","jwt","connectDb","User","req","res","email","password","body","user","findOne","select","status","send","passwordsMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","json","error","console"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEAD,SAAS;AAET,gBAAe,OAAOE,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;;AACA,MAAI;AACH,UAAMC,IAAI,GAAG,MAAMN,IAAI,CAACO,OAAL,CAAa;AAAEJ,MAAAA;AAAF,KAAb,EAAwBK,MAAxB,CAA+B,WAA/B,CAAnB;;AACA,QAAI,CAACF,IAAL,EAAW;AACV,aAAOJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB,CAAP;AACA;;AAED,UAAMC,cAAc,GAAG,MAAMd,MAAM,CAACe,OAAP,CAAeR,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAA7B;;AACA,QAAIO,cAAJ,EAAoB;AACnB,YAAME,KAAK,GAAGf,GAAG,CAACgB,IAAJ,CACb;AAAEC,QAAAA,MAAM,EAAET,IAAI,CAACU;AAAf,OADa,EAEbC,OAAO,CAACC,GAAR,CAAYC,UAFC,EAGb;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAHa,CAAd;AAKAlB,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBR,KAArB;AACA,KAPD,MAOO;AACNX,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,oBAArB;AACA;AACD,GAjBD,CAiBE,OAAOY,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACApB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB;AACA;AACD,CAvBD","sourcesContent":["import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport connectDb from \"../../utils/connectDb\";\nimport User from \"../../models/User\";\n\nconnectDb();\n\nexport default async (req, res) => {\n\tconst { email, password } = req.body;\n\ttry {\n\t\tconst user = await User.findOne({ email }).select(\"+password\");\n\t\tif (!user) {\n\t\t\treturn res.status(404).send(\"User does not exists\");\n\t\t}\n\n\t\tconst passwordsMatch = await bcrypt.compare(password, user.password);\n\t\tif (passwordsMatch) {\n\t\t\tconst token = jwt.sign(\n\t\t\t\t{ userId: user._id },\n\t\t\t\tprocess.env.JWT_SECRET,\n\t\t\t\t{ expiresIn: \"7d\" }\n\t\t\t);\n\t\t\tres.status(200).json(token);\n\t\t} else {\n\t\t\tres.status(401).send(\"Password not match\");\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tres.status(500).send(\"Error logging in user\");\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}